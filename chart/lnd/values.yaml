# Default values for bitcoind.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: lightninglabs/lnd #the image repository to be used
  tag: v0.14.3-beta #the image version
  digest: sha256:f6a3bf4c98c99ed4d29e33343ac5197afc1fab6b50148ec4c34f3abc22f4ec35 #the image digest
  pullPolicy: IfNotPresent #pull policy

lndinit:
  repository: lightninglabs/lndinit
  tag: v0.1.3-beta-lnd-v0.14.3-beta
  digest:

lnd:
  alias: MyLightning #The alias your node will use, which can be up to 32 UTF-8 characters in length.
  address: 44.193.89.189 # Adds an extra ip to the generated certificate.
  domain: a10cf3de770d946fa9f9dbc226ee1355-2054568006.us-east-1.elb.amazonaws.com #A list of domains for lnd to periodically resolve, and advertise the resolved IPs for the backing node.
  revisionHistoryLimit: 3 #How many revisions should be stored on the cluster to be possible to rollback to 
  replicas: 1 #How many replicas of lnd do you want to run

persistence:
  size: 15G #The main disk size of the lnd pod
  storageClass: gp2 #The storage class used for the disk

# Ports that are exposed to other pods in your cluster
internalServices:
  rpcPort: 10009 #Internal RPC port used by lnd 
  restPort: 8080 #the REST service port used by lnd 

# Ports that are visible outside your cluster
externalServices:
  p2pPort: 9735 #
  externalIp: lnd1-tejon #
  letsencryptPort: 8088 #
  watchtowerPort: 9911 #

# The backend lnd is using
bitcoin:
  network: mainnet #The bitcoin network, which should be used. Could be: testnet, simnet, regtest or signet
  signetchallenge: #Connect to a custom signet network defined by this challenge
  signetseednode: #Specify a seed node for the signet network instead of using the global default
  node: neutrino #could be as well: btcd or bitcoind
  defaultchanconfs: 3 #The default number of confirmations a channel must have before it's considered open. We'll require any incoming channel requests to wait this many confirmations before we consider the channel active.
  defaultremotedelay: 144 #If this is not set, it will scale the value according to the channel size.
  maxlocaldelay: 2016 #The maximum number of blocks we will limit the wait that our own funds are encumbered by in the case when our node unilaterally closes
  minhtlc: 1 #The smallest HTLC we are willing to accept on our channels, in millisatoshi.
  minhtlcout: 1000 #The smallest HTLC we are willing to send out on our channels, in millisatoshi.
  basefee: 1000 #The base fee in millisatoshi we will charge for forwarding payments on our channels.
  feerate: 500 #The total fee charged is basefee + (amount * feerate / 1000000)
  timelockdelta: 40 #The CLTV delta we will subtract from a forwarded HTLC's timelock value.
  dnsseed: nodes.lightning.directory,soa.nodes.lightning.directory,lseed.bitcoinstats.com #The seed DNS server(s) to use for initial peer discovery. Must be specified as a '<primary_dns>[,<soa_primary_dns>]' tuple where the SOA address is needed for DNS resolution through Tor but is optional for clearnet users. Multiple tuples can be specified, will overwrite the default seed servers.

  neutrino:
    connect: 143.244.175.41 #Connect only to the specified peers at startup. This creates a persistent connection to a target peer. This is recommended as there aren't many neutrino compliant full nodes on the test network yet.
    maxpeers: 10 #Max number of inbound and outbound peers.
    peers: 
      - faucet.lightning.community #Add a peer to connect with at startup.
    banduration: 60m #How long to ban misbehaving peers. Valid time units are {s, m, h}. Minimum 1 second.
    banthreshold: 100 #Maximum allowed ban score before disconnecting and banning misbehaving peers.
    feeurl: #Use top level 'feeurl' option. Optional URL for fee estimation.
    assertfilterheader: #Optional filter header in height:hash format to assert the state of neutrino's filter header chain on startup.
    useragentname: neutrino #Used to help identify ourselves to other bitcoin peers
    broadcasttimeout: 5s #The amount of time to wait before giving up on a transaction broadcast attempt.
    persistfilters: true #Whether compact filters fetched from the P2P network should be persisted to disk.
    validatechannels: false #Validate every channel in the graph during sync by downloading the containing block. This is the inverse of routing.assumechanvalid, meaning that for Neutrino the validation is turned off by default for massively increased graph sync performance.

  bitcoind:
    rpchost: bitcoind.bitcoind.svc.cluster.local:8332 #The host that your local bitcoind daemon is listening on. By default, this setting is assumed to be localhost with the default port for the current network.
    rpcuser: $RPCUSER #Username for RPC connections to bitcoind. By default, lnd will attempt to automatically obtain the credentials, so this likely won't need to be set (other than for a remote bitcoind instance).
    rpcpass: $RPCPASS #Password for RPC connections to bitcoind. By default, lnd will attempt to automatically obtain the credentials, so this likely won't need to be set (other than for a remote bitcoind instance).
    zmqpubrawblock: tcp://bitcoind.bitcoind.svc.cluster.local:28332 #ZMQ socket which sends rawblock and rawtx notifications from bitcoind. By default, lnd will attempt to automatically obtain this information, so this likely won't need to be set (other than for a remote bitcoind instance).
    zmqpubrawtx: tcp://bitcoind.bitcoind.svc.cluster.local:28333 #ZMQ socket which sends rawblock and rawtx notifications from bitcoind. By default, lnd will attempt to automatically obtain this information, so this likely won't need to be set (other than for a remote bitcoind instance).
    estimatemode: ECONOMICAL #Fee estimate mode for bitcoind. It must be either "ECONOMICAL" or "CONSERVATIVE".
    pruned-node-max-peers: 4 #The maximum number of peers lnd will choose from the backend node to retrieve pruned blocks from. This only applies to pruned nodes.

watchtower:
  active: true #Enable integrated watchtower
  sweep-fee-rate: 10 #
  readtimeout: 15s #
  writetimeout: 15s #
  port: 9911 #
  private-tower-uris: #

database:
  batch-commit-interval: 500ms #The maximum interval the graph database will wait between attempting to flush a batch of modifications to disk. Defaults to 500 milliseconds.
  no-graph-cache: false #Can only be used with a bolt database backend. Slower than in memory. 
  prune-revocation: true #Specify whether the optional migration for pruning old revocation logs should be applied.
  postgres:
    active: false #activate postgres server
    dsn: postgres://lnd:lnd@localhost:45432/lnd?sslmode=disable #Postgres connection string.
    maxconnections: 100 #Postgres maximum number of connections. Set to zero for unlimited.
    timeout: 20s #Postgres connection timeout. Valid time units are {s, m, h}. Set to zero to disable.
  bolt:
    active: true #Activate the internal bolt database
    nofreelistsync: 1 #If true, prevents the database from syncing its freelist to disk
    auto-compact: true #Whether the databases used within lnd should automatically be compacted on every startup (and if the database has the configured minimum age). This is disabled by default because it requires additional disk space to be available during the compaction that is freed afterwards. In general compaction leads to smaller database files.
    auto-compact-min-age: 168h #How long ago the last compaction of a database file must be for it to be considered for auto compaction again. 
    dbtimeout: 60s #Specify the timeout to be used when opening the database
  etcd:
    active: false #activate etcd DB 
    host: localhost:2379 #the host and port to connect to
    user: userscopedforlnd #Username for the database user
    pass: longandsekrit #Password for the database user
    namespace: lnd #Etcd namespace to use
    disabletls: false #Whether to disable the use of TLS for etcd.
    cert_file: /key/path #Path to the TLS certificate for etcd RPC.
    key_file: /a/path #Path to the TLS private key for etcd RPC.
    insecure_skip_verify: true #Whether we intend to skip TLS verification
    collect_stats: true #Whether to collect etcd commit stats.
    embedded: false #If set LND will use an embedded etcd instance instead of the external one.
    embedded_client_port: 1234 #If non zero, LND will use this as client port for the embedded etcd instance.
    embedded_peer_port: 1235 #If non zero, LND will use this as peer port for the embedded etcd instance.
    embedded_log_file: /path/etcd.log #If set the embedded etcd instance will log to the specified file.
    max_msg_size: 33554432 #The maximum message size in bytes that we may send to etcd. Defaults to 32 MiB.

autopilot:
  active: true #Activate autopilot 
  maxchannels: 5 #The maximum number of channels that should be created
  allocation: 0.6 #The fraction of total funds that should be committed to automatic channel establishment
  heuristic: top_centrality:1 #Heuristic to activate, and the weight to give it during scoring. (default: preferential:1)
  minchansize: 20000 #Minimum channel size created by autopilot
  maxchansize: 2000000 #Maximum channel size created by autopilot
  private: true #Private channels won't be announced to the network.
  minconfs: 2 #Created by the autopilot agent must have. (default: 1)
  conftarget: 2 #The confirmation target (in blocks) for channels opened by autopilot. (default: 3)

routerrpc:
  minrtprob: 1 #Minimum required route success probability to attempt the payment (default: 0.01)
  apriorihopprob: 0.5 #Assumed success probability of a hop in a route when no other information is available. (default: 0.6)
  aprioriweight: 0.75 #Weight of the a priori probability in success probability estimation. Valid values are in [0, 1]. (default: 0.5)
  penaltyhalflife: 2h0m0s #Defines the duration after which a penalized node or channel is back at 50% probability (default: 1h0m0s)
  attemptcost: 90 #The (virtual) fixed cost in sats of a failed payment attempt (default: 100)
  attemptcostppm: 1000 #The (virtual) proportional cost in ppm of the total amount of a failed payment attempt (default: 1000)
  maxmchistory: 1000 #The maximum number of payment results that are held on disk by mission control (default: 1000)
  mcflushinterval: 1m #The time interval with which the MC store state is flushed to the DB.

workers:
  read: 200 #Maximum number of concurrent read pool workers, proportional to the number of peers. (default: 100)
  write: 8 #Maximum number of concurrent write pool, proportional to the number of CPUs on the host. (default: 8)
  sig: 8 #Maximum number of concurrent sig pool workers, proportional to the number of CPUs on the host. (default: 8)

caches:
  reject-cache-size: 50000 #Maximum number of entries contained in the reject cache, which is used to speed up filtering of new channel announcements
  channel-cache-size: 20000 #Maximum number of entries contained in the channel cache, which is used to reduce memory allocations from gossip queries from peers
  rpc-graph-cache-duration: 5m #The duration that the response to DescribeGraph should be cached for

protocol:
  wumbo-channels: true #If set, then lnd will create and accept requests for channels larger than 0.16 BTC
  no-anchors: false #Set to disable support for anchor commitments. If not set, lnd will use anchor channels by default if the remote channel party supports them.
  no-script-enforced-lease: false #Set to disable support for script enforced lease channel commitments.
  option-scid-alias: true #Set to enable support for option_scid_alias channels, which can be referred to by an alias instead of the confirmed ShortChannelID.
  zero-conf: false #Set to enable support for zero-conf channels. This requires the option-scid-alias flag to also be set.

cluster:
  enable-leader-election: false #Enables leader election if set.
  leader-elector: etcd #Leader elector to use. Valid values: "etcd"
  etcd-election-prefix: /leader/ #Election key prefix when using etcd leader elector. Defaults to "/leader/".
  id: example.com #Identifier for this node inside the cluster (used in leader election). Defaults to the hostname.
  leader-session-ttl: 30 #The session TTL in seconds after which a new leader is elected if the old leader is shut down, crashed or becomes unreachable

rpcmiddleware:
  active: true #Enable the RPC middleware interceptor functionality
  intercepttimeout: 2s #Time after which a RPC middleware intercept request will time out and return an error if it hasn't yet received a response.
  mandatory: #Add the named middleware to the list of mandatory middlewares. All RPC requests are blocked/denied if any of the mandatory middlewares is not registered.
  # - my-example-middleware
  # - other-mandatory-middleware

remotesigner:
  active: false #Use a remote signer for signing any on-chain related transactions or messages
  rpchost: remote.signer.lnd.host:10009 #The remote signer's RPC host:port.
  macaroonpath: /path/to/remote/signer/admin.macaroon #The macaroon to use for authenticating with the remote signer.
  tlscertpath: /path/to/remote/signer/tls.cert #The TLS certificate to use for establishing the remote signer's identity.
  timeout: 20s #The timeout for connecting to and signing requests with the remote signer
  migrate-wallet-to-watch-only: false #WARNING: This cannot be undone! If a wallet with private key material already exists, migrate it into a watch-only wallet on first startup.

gossip:
  pinned-syncers: #Specify a set of pinned gossip syncers, which will always be actively syncing whenever the corresponding peer is online. Each value should be a hex-encoded pubkey of the pinned peer.
    # - pubkey1
    # - pubkey1
  max-channel-update-burst: 10 #The maximum number of updates for a specific channel and direction that lnd will accept over the channel update interval.
  channel-update-interval: 1m #The maximum number of updates for a specific channel and direction that lnd will accept over the channel update interval.

invoices:
  holdexpirydelta: 15 #If a hold invoice has accepted htlcs that reach their expiry height and are not timed out, the channel holding the htlc is force closed to resolve the invoice's htlcs.

application:
  autoUnlockPasswordLength: 50 #Length of the generated password that allows lnd to unlock automatically
  maxlogfiles: 3 #Number of logfiles that the log rotation should keep. Setting it to 0 disables deletion of old log files.
  maxlogfilesize: 10 #Max log file size in MB before it is rotated.
  acceptortimeout: 15s #Time after which an RPCAcceptor will time out and return false if it hasn't yet received a response.
  tlscertduration: 10080h #The duration from generating the self signed certificate to the certificate expiry date.
  tlsautorefresh: true #If set, then all certs will automatically be refreshed if they're close to expiring, or if any parameters related to extra IPs or domains in the cert change.
  sync-freelist: true #Enable free list syncing for the default bbolt database. This will decrease start up time, but can result in performance degradation for very large databases, and also result in higher memory usage.
  coin-selection-strategy: largest #The strategy to use for selecting coins for wallet transactions. Options are 'largest' and 'random'.
  payments-expiration-grace-period: 30s #A period to wait before for closing channels with outgoing htlcs that have timed out and are a result of this nodes instead payment. In addition to our current block based deadline, if specified this grace period will also be taken into account. Valid time units are {s, m, h}.
  nolisten: false #Disable listening for incoming p2p connections. This will override all listeners.
  nat: false #Instead of explicitly stating your external IP address, you can also enable UPnP or NAT-PMP support on the daemon. Both techniques will be tried and require proper hardware support.
  norest: false #Disable REST API.
  no-rest-tls: false #Disable TLS for the REST API.
  peers: # Specify peer(s) to connect to first
  ws-ping-interval: 30s #The ping interval for REST based WebSocket connections, set to 0 to disable sending ping messages from the server side.
  ws-pong-wait: 5s #The time we wait for a pong response message on REST based WebSocket connections before the connection is closed as inactive. Valid time units are {s, m, h}.
  minbackoff: 1s #Shortest backoff when reconnecting to persistent peers. Valid time units are {s, m, h}.
  maxbackoff: 2h #Longest backoff when reconnecting to persistent peers. Valid time units are {s, m, h}.
  connectiontimeout: 120s #The timeout value for network connections in seconds, default to 120 seconds. Valid uints are {ms, s, m, h}.
  debuglevel: debug,PEER=info #Valid levels are {trace, debug, info, warn, error, critical} You may also specify <global-level>,<subsystem>=<level>,<subsystem2>=<level>,... to set log level for individual subsystems. Use lncli debuglevel --show to list available subsystems.
  profile: false #5000 #enables http profiling on specified port and publishes it on the public domain
  unsafe-replay: true #Causes a link to replay the adds on its commitment txn after starting up, this enables testing of the sphinx replay logic.
  maxpendingchannels: 1 # The maximum number of incoming pending channels permitted per peer.
  blockcachesize: 41943040 # ~40MB
  feeurl: https://nodes.lightning.computer/fees/v1/btc-fee-estimates.json # Must be set for neutrino on mainnet
  nobootstrap: false #If true, then automatic network bootstrapping will not be attempted. This means that your node won't attempt to automatically seek out peers on the network.
  minchansize: 200000 #Minimum channel size 200k sats
  maxchansize: 50000000 #Maximum channel size .5 btc
  coop-close-target-confs: 10 #The target number of blocks in which a cooperative close initiated by a remote peer should be confirmed. This target is used to estimate the starting fee rate that will be used during fee negotiation with the peer.
  channel-commit-interval: 30m #default is 50 milliseconds
  pending-commit-interval: 2m # maximum time that is allowed to pass while waiting for the remote party to revoke a locally initiated commitment state default is 1m0s
  channel-commit-batch-size: 10 #number of channel state updates that is accumulated before signing a new commitment
  keep-failed-payment-attempts: false #Keeps persistent record of all failed payment attempts for successfully settled payments.
  default-remote-max-htlcs: 50 #The default max_htlc applied when opening or accepting channels. This value limits the number of concurrent HTLCs that the remote party can add to the commitment.
  chan-enable-timeout: 19m0s #The duration that a peer connection must be stable before attempting to send a channel update to re-enable or cancel a pending disables of the peer's channels on the network.
  chan-disable-timeout: 20m0s #The duration that must elapse after first detecting that an already active channel is actually inactive and sending channel update disabling it to the network. The pending disable can be canceled if the peer reconnects and becomes stable for chan-enable-timeout before the disable update is sent.
  chan-status-sample-interval: 1m0s #The polling interval between attempts to detect if an active channel has become inactive due to its peer going offline. (default: 1m0s)
  height-hint-cache-query-disable: false #Disable queries from the height-hint cache to try to recover channels stuck in the pending close state. Disabling height hint queries may cause longer chain rescans, resulting in a performance hit. Unset this after channels are unstuck so you can get better performance again.
  historicalsyncinterval: 1h #The polling interval between historical graph sync attempts. Each historical graph sync attempt ensures we reconcile with the remote peer's graph from the genesis block. (default: 1h0m0s)
  ignore-historical-gossip-filters: false #If true, will not reply with historical data that matches the range specified by a remote peer's gossip_timestamp_filter. Doing so will result in lower memory and bandwidth requirements.
  rejectpush: true #If true, lnd will not accept channel opening requests with non-zero push amounts. This should prevent accidental pushes to merchant nodes.
  rejecthtlc: false #If true, lnd will not forward any HTLCs that are meant as onward payments. This option will still allow lnd to send HTLCs and receive HTLCs but lnd won't be used as a hop.
  requireinterceptor: false # If true, all HTLCs will be held until they are handled by an interceptor
  stagger-initial-reconnect: true # If true, will apply a randomized staggering between 0s and 30s when reconnecting to persistent peers on startup.
  max-cltv-expiry: 2016 # The maximum number of blocks funds could be locked up for when forwarding payments
  max-channel-fee-allocation: 0.5 #The maximum percentage of total funds that can be allocated to a channel's commitment fee. This only applies for the initiator of the channel. Valid values are within [0.1, 1]. (default: 0.5)
  max-commit-fee-rate-anchors: 10 #The maximum fee rate in sat/vbyte that will be used for commitments of channels of the anchors type. Must be large enough to ensure transaction propagation (default: 10)
  dust-threshold: 500000 # A threshold defining the maximum amount of dust a given channel can have after which forwarding and sending dust HTLC's to and from the channel will fail
  dry-run-migration: false #If true, lnd will abort committing a migration if it would otherwise have been successful. This leaves the database unmodified, and still compatible with the previously active version of lnd.
  enable-upfront-shutdown: true #If true, option upfront shutdown script will be enabled. If peers that we open channels with support this feature, we will automatically set the script to which cooperative closes should be paid out to on channel open. 
  accept-keysend: true # If true, spontaneous payments through keysend will be accepted.
  keysend-hold-time: true #If non-zero, keysend payments are accepted but not immediately settled. If the payment isn't settled manually after the specified time, it is canceled automatically.
  accept-amp: true # If true, spontaneous payments through AMP will be accepted
  gc-canceled-invoices-on-startup: true # If true, we'll attempt to garbage collect canceled invoices upon start.
  gc-canceled-invoices-on-the-fly: true # If true, we'll delete newly canceled invoices on the fly
  allow-circular-route: true #If true, our node will allow htlc forwards that arrive and depart on the same channel.
  trickledelay: 180000 # Time in milliseconds between each release of announcements to the network
  numgraphsyncpeers: 3 # The number of peers that we should receive new graph updates from

healthcheck:
  chainbackend:
    attempts: 3 #The number of times we should attempt to query our chain backend before gracefully shutting down. Set this value to 0 to disable this health check.
    timeout: 10s #The amount of time we allow a call to our chain backend to take before we fail the attempt. This value must be >= 1s.
    backoff: 30s #The amount of time we should backoff between failed attempts to query chain backend. This value must be >= 1s.
    interval: 1m #The amount of time we should wait between chain backend health checks. This value must be >= 1m.
  diskspace: 
    diskrequired: 0.1 #The minimum ratio of free disk space to total capacity that we require.
    attempts: 2 #The number of times we should attempt to query our available disk space before gracefully shutting down. Set this value to 0 to disable this health check.
    timeout: 5s #The amount of time we allow a query for our available disk space to take before we fail the attempt. This value must be >= 1s.
    backoff: 1m #The amount of time we should backoff between failed attempts to query available disk space. This value must be >= 1s.
    interval: 6h #The amount of time we should wait between disk space health checks. This value must be >= 1m.
  tls:
    attempts: 2 #The number of times we should attempt to check for certificate expiration before  gracefully shutting down. Set this value to 0 to disable this health check.
    timeout: 5s #The amount of time we allow a query for certificate expiration to take before we fail the attempt. This value must be >= 1s.
    backoff: 1m #The amount of time we should backoff between failed attempts to query certificate expiration. This value must be >= 1s.
    interval: 1m #The amount of time we should wait between certificate expiration health checks. This value must be >= 1m.
  torconnection:
    attempts: 3 #The number of times we should attempt to check our tor connection before gracefully shutting down. Set this value to 0 to disable this health check.
    timeout: 10s #The amount of time we allow a call to our tor connection to take before we fail the attempt. This value must be >= 1s.
    backoff: 30s #The amount of time we should backoff between failed attempts to check tor connection. This value must be >= 1s.
    interval: 1m #The amount of time we should wait between tor connection health checks. This value must be >= 1m.
  remotesigner:
    attempts: 1 #The number of times we should attempt to check our remote signer RPC connection before gracefully shutting down. Set this value to 0 to disable this health check.
    timeout: 1s #The amount of time we allow a call to our remote signer RPC connection to take before we fail the attempt. This value must be >= 1s.
    backoff: 30s #The amount of time we should backoff between failed attempts to check remote signer RPC connection. This value must be >= 1s.
    interval: 1m #The amount of time we should wait between remote signer RPC connection health checks. This value must be >= 1m.

prometheus:
  active: false #If true, lnd will start the Prometheus exporter - lnd must be built with the monitoring tag; `make && make install tags=monitoring` to activate them
  perfhistograms: true #If true, then we'll export additional information that allows users to plot the processing latency, and total time spent across each RPC calls+service


 